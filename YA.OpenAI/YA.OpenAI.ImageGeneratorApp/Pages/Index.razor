@page "/"
@using global::OpenAI.Interfaces;
@using global::OpenAI.ObjectModels.RequestModels;
@using global::OpenAI.ObjectModels;
@inject IOpenAIService OpenAIService

<PageTitle>YA Image Generator</PageTitle>

<div class="container">
    <div class="header">
        <img src="./img/kedi1.svg" class="logo" alt="YA App Logo">
        <h3>YA Image Generator</h3>
    </div>


    <div class="headline">
        <p>Write your description, let our imagination bring it to life! Creating unique visuals is now a breeze. Try it out and unleash your creativity! 🎨✨</p>
    </div>


    <hr class="divider">


    <div class="form-group">
        <label for="promptInput">Prompt:</label>
        <textarea id="promptInput" @bind="usersPrompt" class="form-control" rows="3"></textarea>
    </div>


    <div class="form-group">
        <label for="exampleCountInput">Number of Images:</label>
        <input id="exampleCountInput" @bind="imageCount" class="form-control" type="number" />
    </div>




    @if (!isLoading)
    {
        <button class="btn btn-primary" @onclick="GenerateImages">Generate Images</button>


        <div class="picture-container" @key="generatedImages">
            @if(generatedImages is not null && generatedImages.Any())
            {
                <h4 class="result-heading">Generated Images</h4>
                <div class="animated-picture-container">

                    @foreach (var image in generatedImages)
                    {
                        <img src="@image" class="dall-e-picture" alt="Generated DALL-E Image"/>
                    }

                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center">
            <img class="img-thumbnail" src="./img/loading.gif" />


            <p>Loading animation is created by <a src="https://dribbble.com/shots/3718681-Loading-GIF">Eric.Wen</a></p>
        </div>

    }
</div>

@code
{
    private bool isLoading = false;
    private string usersPrompt = string.Empty;
    private int imageCount = 3;
    private List<string> generatedImages = new List<string>();

    private async Task GenerateImages()
    {
        try
        {
            isLoading = true;

            if (string.IsNullOrEmpty(usersPrompt) || string.IsNullOrWhiteSpace(usersPrompt))
                return;

            if (imageCount < 1 || imageCount > 6)
                return;

            var imageResult = await OpenAIService.Image.CreateImage(new ImageCreateRequest
                {
                    Prompt = usersPrompt,
                    N = imageCount,
                    Size = StaticValues.ImageStatics.Size.Size256,
                    ResponseFormat = StaticValues.ImageStatics.ResponseFormat.Url,
                    User = "TestUser"
                });


            if (imageResult.Successful)
            {
                generatedImages = imageResult.Results.Select(r => r.Url).ToList();
            }
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            isLoading = false;
        }
    }
}

<style>

    body {
        font-family: Arial, sans-serif;
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
    }


    .container {
        max-width: 600px;
        margin: 30px auto;
        padding: 20px;
        background-color: #fff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
    }


    .header {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 20px;
    }


    .logo {
        max-width: 256px;
        margin-right: 10px;
    }


    h3 {
        margin: 0;
        font-weight: 600;
    }


    .form-group {
        margin-bottom: 10px;
    }


    .btn {
        margin-top: 10px;
    }


    .result-heading {
        margin-top: 20px;
        margin-bottom: 10px;
    }


    .picture-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }


    .dall-e-picture {
        max-width: 200px;
        margin: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }


    .divider {
        margin: 20px 0;
        border: none;
        height: 1px;
        background-color: #ddd;
    }


    .animated-picture-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        animation: fadeInAnimation 1s ease-in;
    }


    .headline {
        font-size: 16px;
        font-weight: 500;
        color: #666;
        margin-bottom: 20px;
    }






    @@keyframes fadeInAnimation {
        0% {
            opacity: 0;
        }


        100% {
            opacity: 1;
        }
    }


    .animated-fade-in {
        animation: fadeInText 1s ease-in;
    }


    @@keyframes fadeInText {
        0% {
            opacity: 0;
        }

        100% {
            opacity: 1;
        }
    }
</style>